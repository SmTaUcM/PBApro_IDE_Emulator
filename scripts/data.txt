Property documentation

autoSipEnabled : bool
This property holds toggles automatic SIP (software input panel) visibility
4.5
Set this property to true to automatically display the SIP when entering widgets that accept keyboard input. This property only affects widgets with the WA_InputMethodEnabled attribute set, and is typically used to launch a virtual keyboard on devices which have very few or no keys.
{ The property only has an effect on platforms which use software input panels, such as Windows CE and Symbian.}
The default is platform dependent.

cursorFlashTime : int
This property holds the text cursor's flash (blink) time in milliseconds
The flash time is the time required to display, invert and restore the caret display. Usually the text cursor is displayed for half the cursor flash time, then hidden for the same amount of time, but this may vary.
The default value on X11 is 1000 milliseconds. On Windows, the {Control Panel} value is used and setting this property sets the cursor flash time for all applications.
We recommend that widgets do not cache this value as it may change at any time if the user changes the global desktop settings.

doubleClickInterval : int
This property holds the time limit in milliseconds that distinguishes a double click from two consecutive mouse clicks
The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used. However, on Windows and Symbian OS, calling this function sets the double click interval for all applications.

globalStrut : QSize
This property holds the minimum size that any GUI element that the user can interact with should have
For example, no button should be resized to be smaller than the global strut size. The strut size should be considered when reimplementing GUI controls that may be used on touch-screens or similar I/O devices.
Example:
doc/src/snippets/code/src_gui_kernel_qapplication.cpp 3
By default, this property contains a QSize object with zero width and height.
Scriptable sub-properties:
globalStrut_width, globalStrut_height

keyboardInputInterval : int
This property holds the time limit in milliseconds that distinguishes a key press from two consecutive key presses
4.2
The default value on X11 is 400 milliseconds. On Windows and Mac OS, the operating system's value is used.

layoutDirection : Qt::LayoutDirection
This property holds the default layout direction for this application
On system start-up, the default layout direction depends on the application's language.
See also:
QWidget::layoutDirection isLeftToRight() isRightToLeft()

quitOnLastWindowClosed : bool
This property holds whether the application implicitly quits when the last window is closed.
The default is true.
If this property is true, the applications quits when the last visible primary window (i.e. window with no parent) with the Qt::WA_QuitOnClose attribute set is closed. By default this attribute is set for all widgets except for sub-windows. Refer to {Qt::WindowType} for a detailed list of Qt::Window objects.
See also:
quit() QWidget::close()

startDragDistance : int
If you support drag and drop in your application, and want to start a drag and drop operation after the user has moved the cursor a certain distance with a button held down, you should use this property's value as the minimum distance required.
For example, if the mouse position of the click is stored in startPos and the current position (e.g. in the mouse move event) is currentPos, you can find out if a drag should be started with code like this:
doc/src/snippets/code/src_gui_kernel_qapplication.cpp 7
Qt uses this value internally, e.g. in QFileDialog.
The default value is 4 pixels.
See also:
startDragTime() QPoint::manhattanLength() {Drag and Drop}

startDragTime : int
This property holds the time in milliseconds that a mouse button must be held down before a drag and drop operation will begin
If you support drag and drop in your application, and want to start a drag and drop operation after the user has held down a mouse button for a certain amount of time, you should use this property's value as the delay.
Qt also uses this delay internally, e.g. in QTextEdit and QLineEdit, for starting a drag.
The default value is 500 ms.
See also:
startDragDistance() {Drag and Drop}

styleSheet : QString
This property holds the application style sheet
4.2
By default, this property returns an empty string unless the user specifies the {-stylesheet} option on the command line when running the application.
See also:
QWidget::setStyle() {Qt Style Sheets}

wheelScrollLines : int
This property holds the number of lines to scroll a widget, when the mouse wheel is rotated.
If the value exceeds the widget's number of visible lines, the widget should interpret the scroll operation as a single {page up} or {page down}. If the widget is an {QAbstractItemView}{item view class}, then the result of scrolling one line depends on the setting of the widget's {QAbstractItemView::verticalScrollMode()}{scroll mode}. Scroll one line can mean {QAbstractItemView::ScrollPerItem}{scroll one item} or {QAbstractItemView::ScrollPerPixel}{scroll one pixel}.
By default, this property has a value of 3.

windowIcon : QIcon
This property holds the default window icon
See also:
QWidget::setWindowIcon() {Setting the Application Icon}




Member method documentation

void AboutToClose()
Shows that the PBA.pro will be closed.

void AboutToCloseResources()
Notification that the resources will be closed in a moment.

void AllComponentsInitialized()
Is emitted, after all components are initialized.

void AllComponentsLoaded()
Is emitted, after all components are loaded.

void AllResourcesLoaded()
Is emitted, after all components are Resources are created.

QObjectList AllWidgets()
Returns all toplevel Widgets.

void Beep()
Beeps.

PPComponent * GetComponent(const QString &sComponent) const
Returns component defined by name.

QStringList GetComponentNames() const
Returns all component names.

QString GetComponentVersion(const QString &sComponent) const
Returns the current version of the specified component.

QString GetFrameworkVersion()
Returns the current framework version.

bool IsRuntimeMode() const
Shows if the PBA.pro is in Runtime Mode or not.

void LicServerLost()
Internal.

void LoadSelectedResources()
Internal.

void MessageReceived(const QString &s)
Message from an other PBA.pro Instance received.

void QuitCheck()

void QuitWithoutWarning(quint8 iReturnCode=0)
Shutdown PBA.pro without any warning.

bool Restart(const QStringList &sCmdLine=QStringList(), bool bForce=true)
Restarts the PBA.pro without any warning. The optional command line is passed to the new PBA.pro instance.

bool RestartWithWarning(QString sMsgBoxQuestion=QString())
Restarts the PBA.pro but showing a messagebox with a optional question. Without argument "Restart PBA.pro?" is shown.

bool SetParanoid(bool bParanoid)
Internal.

int ShowMessage(const QString &title, const QString &msg, const QString &icon=QLatin1String("i"))
Shows a Message.

void ShowRuntimeNotification()
Internal.

bool StartApplication(const QString &sApp, const QStringList &slArgs=QStringList())
Allows to start an external Application.

bool StartExternalApplication(const QString &sApp, const QString &sArg1=QString::null, const QString &sArg2=QString::null, const QString &sArg3=QString::null, const QString &sArg4=QString::null, const QString &sArg5=QString::null, const QString &sArg6=QString::null)
Allows to start an external Application.

void StartupFinished()
Is emitted, when the PBA.pro is completely start up.

void aboutQt()
Displays a simple message box about Qt. The message includes the version number of Qt being used by the application.
This is useful for inclusion in the Help menu of an application, as shown in the {mainwindows/menus}{Menus} example.
This function is a convenience slot for QMessageBox::aboutQt().

bool autoSipEnabled() const

void closeAllWindows()
Closes all top-level windows.
This function is particularly useful for applications with many top-level windows. It could, for example, be connected to a {Exit} entry in the {File} menu:
examples/mainwindows/mdi/mainwindow.cpp 0
The windows are closed in random order, until one window does not accept the close event. The application quits when the last window was successfully closed; this can be turned off by setting quitOnLastWindowClosed to false.
See also:
quitOnLastWindowClosed lastWindowClosed() QWidget::close() QWidget::closeEvent() lastWindowClosed() quit() topLevelWidgets() QWidget::isWindow()

void commitDataRequest(QSessionManager &sessionManager)
4.2
This signal deals with {Session Management}{session management}. It is emitted when the QSessionManager wants the application to commit all its data.
Usually this means saving all open files, after getting permission from the user. Furthermore you may want to provide a means by which the user can cancel the shutdown.
You should not exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context.
Within this signal, no user interaction is possible, unless you ask the manager for explicit permission. See QSessionManager::allowsInteraction() and QSessionManager::allowsErrorInteraction() for details and example usage.
You should use Qt::DirectConnection when connecting to this signal.
See also:
isSessionRestored() sessionId() saveState() {Session Management}

void focusChanged(QWidget *old, QWidget *now)
4.1
This signal is emitted when the widget that has keyboard focus changed from old to now, i.e., because the user pressed the tab-key, clicked into a widget or changed the active window. Both old and now can be the null-pointer.
The signal is emitted after both widget have been notified about the change through QFocusEvent.
See also:
QWidget::setFocus() QWidget::clearFocus() Qt::FocusReason

void fontDatabaseChanged()
4.5
This signal is emitted when application fonts are loaded or removed.
See also:
QFontDatabase::addApplicationFont() QFontDatabase::addApplicationFontFromData() QFontDatabase::removeAllApplicationFonts() QFontDatabase::removeApplicationFont()

void lastWindowClosed()
This signal is emitted from QApplication::exec() when the last visible primary window (i.e. window with no parent) with the Qt::WA_QuitOnClose attribute set is closed.
By default,
this attribute is set for all widgets except transient windows such as splash screens, tool windows, and popup menus
QApplication implicitly quits when this signal is emitted.
This feature can be turned off by setting quitOnLastWindowClosed to false.
See also:
QWidget::close()

void quit()

void saveStateRequest(QSessionManager &sessionManager)
4.2
This signal deals with {Session Management}{session management}. It is invoked when the {QSessionManager}{session manager} wants the application to preserve its state for a future session.
For example, a text editor would create a temporary file that includes the current contents of its edit buffers, the location of the cursor and other aspects of the current editing session.
You should never exit the application within this signal. Instead, the session manager may or may not do this afterwards, depending on the context. Futhermore, most session managers will very likely request a saved state immediately after the application has been started. This permits the session manager to learn about the application's restart policy.
Within this function, no user interaction is possible, unless you ask the manager for explicit permission. See QSessionManager::allowsInteraction() and QSessionManager::allowsErrorInteraction() for details.
You should use Qt::DirectConnection when connecting to this signal.
See also:
isSessionRestored() sessionId() commitData() {Session Management}

void setAutoSipEnabled(const bool enabled)

void setStyleSheet(const QString &sheet)




Enumeration documentation

ColorSpec
NormalColor the default color allocation policy CustomColor the same as NormalColor for X11; allocates colors to a palette on demand under Windows ManyColor the right choice for applications that use thousands of colors
See setColorSpec() for full details.
Constant
Value
Description
NormalColor
0

CustomColor
1

ManyColor
2


Type
Tty a console application GuiClient a GUI client application GuiServer a GUI server application (for Qt for Embedded Linux)
Constant
Value
Description
Tty
0

GuiClient
1

GuiServer
2




Generated on Thu 26. Mar 08:46:38 2020 for PBA.pro V02.70 Component Documentation by AIM GmbH